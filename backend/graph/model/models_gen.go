// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type GenerateImageInput struct {
	Text        string       `json:"text"`
	Style       *ImageStyle  `json:"style,omitempty"`
	AspectRatio *AspectRatio `json:"aspectRatio,omitempty"`
}

type GenerateImageResult struct {
	ImageURL    string `json:"imageUrl"`
	Prompt      string `json:"prompt"`
	GeneratedAt string `json:"generatedAt"`
}

type GenerateInput struct {
	OriginalText string `json:"originalText"`
	Level        int    `json:"level"`
}

type GenerateResult struct {
	InflammatoryText string  `json:"inflammatoryText"`
	Explanation      *string `json:"explanation,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Reply struct {
	ID      string    `json:"id"`
	Type    ReplyType `json:"type"`
	Content string    `json:"content"`
}

type TwitterPostInput struct {
	Text          string  `json:"text"`
	ImageURL      *string `json:"imageUrl,omitempty"`
	AddHashtag    *bool   `json:"addHashtag,omitempty"`
	AddDisclaimer *bool   `json:"addDisclaimer,omitempty"`
}

type TwitterPostResult struct {
	Success      bool    `json:"success"`
	TweetID      *string `json:"tweetId,omitempty"`
	TweetURL     *string `json:"tweetUrl,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

type AspectRatio string

const (
	AspectRatioSquare    AspectRatio = "SQUARE"
	AspectRatioLandscape AspectRatio = "LANDSCAPE"
	AspectRatioPortrait  AspectRatio = "PORTRAIT"
)

var AllAspectRatio = []AspectRatio{
	AspectRatioSquare,
	AspectRatioLandscape,
	AspectRatioPortrait,
}

func (e AspectRatio) IsValid() bool {
	switch e {
	case AspectRatioSquare, AspectRatioLandscape, AspectRatioPortrait:
		return true
	}
	return false
}

func (e AspectRatio) String() string {
	return string(e)
}

func (e *AspectRatio) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AspectRatio(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AspectRatio", str)
	}
	return nil
}

func (e AspectRatio) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AspectRatio) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AspectRatio) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ImageStyle string

const (
	ImageStyleRealistic    ImageStyle = "REALISTIC"
	ImageStyleIllustration ImageStyle = "ILLUSTRATION"
	ImageStyleMeme         ImageStyle = "MEME"
	ImageStyleDramatic     ImageStyle = "DRAMATIC"
)

var AllImageStyle = []ImageStyle{
	ImageStyleRealistic,
	ImageStyleIllustration,
	ImageStyleMeme,
	ImageStyleDramatic,
}

func (e ImageStyle) IsValid() bool {
	switch e {
	case ImageStyleRealistic, ImageStyleIllustration, ImageStyleMeme, ImageStyleDramatic:
		return true
	}
	return false
}

func (e ImageStyle) String() string {
	return string(e)
}

func (e *ImageStyle) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageStyle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageStyle", str)
	}
	return nil
}

func (e ImageStyle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ImageStyle) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ImageStyle) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ReplyType string

const (
	ReplyTypeLogicalCriticism ReplyType = "LOGICAL_CRITICISM"
	ReplyTypeNitpicking       ReplyType = "NITPICKING"
	ReplyTypeOffTarget        ReplyType = "OFF_TARGET"
	ReplyTypeExcessiveDefense ReplyType = "EXCESSIVE_DEFENSE"
)

var AllReplyType = []ReplyType{
	ReplyTypeLogicalCriticism,
	ReplyTypeNitpicking,
	ReplyTypeOffTarget,
	ReplyTypeExcessiveDefense,
}

func (e ReplyType) IsValid() bool {
	switch e {
	case ReplyTypeLogicalCriticism, ReplyTypeNitpicking, ReplyTypeOffTarget, ReplyTypeExcessiveDefense:
		return true
	}
	return false
}

func (e ReplyType) String() string {
	return string(e)
}

func (e *ReplyType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReplyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReplyType", str)
	}
	return nil
}

func (e ReplyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ReplyType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ReplyType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
